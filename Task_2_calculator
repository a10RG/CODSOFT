import tkinter as tk
import math

class Calculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Calculator")
        self.root.geometry("400x600")
        self.root.resizable(False, False)
        self.root.configure(bg="#00264d") 
        
        self.expression = ""
        
        # Entry widget for displaying calculations
        self.display = tk.Entry(root, font=("Arial", 24), borderwidth=2, relief="solid", justify="right", bg="#004080", fg="white")
        self.display.grid(row=0, column=0, columnspan=4, ipady=15, pady=10)

        # Buttons configuration
        buttons = [
            '(', ')', '√', '^',
            '7', '8', '9', '/',
            '4', '5', '6', '*',
            '1', '2', '3', '-',
            'C', '0', '%', '+',
            '=',  # '=' is handled differently for better alignment
        ]

        # Grid layout for buttons
        row = 1
        col = 0
        for button_text in buttons:
            if button_text == '=':
                button = tk.Button(root, text=button_text, font=("Arial", 18), width=9, height=2, bg="#0066cc", fg="white",
                                   command=lambda text=button_text: self.on_button_click(text))
                button.grid(row=row, column=col, columnspan=2, padx=5, pady=5)
                col += 1  
            else:
                button = tk.Button(root, text=button_text, font=("Arial", 18), width=4, height=2, bg="#00509e", fg="white",
                                   command=lambda text=button_text: self.on_button_click(text))
                button.grid(row=row, column=col, padx=5, pady=5)
            col += 1
            if col > 3:
                col = 0
                row += 1

    def on_button_click(self, char):
        if char == 'C':
            self.expression = ""
        elif char == '=':
            try:
                # Replace '^' with '**' for Python's exponentiation
                self.expression = self.expression.replace('^', '**')
                # Handle square root (√)
                # To calculate the root use brackets for the number under the root : eg. √(16) = 4.0
                self.expression = self.expression.replace('√', 'math.sqrt')
                self.expression = str(eval(self.expression))
            except Exception:
                self.expression = "Error"
        elif char == '%':
            try:
                # Evaluate as a percentage
                self.expression = str(eval(f"({self.expression}) / 100"))
            except Exception:
                self.expression = "Error"
        else:
            self.expression += str(char)
        self.update_display()

    def update_display(self):
        self.display.delete(0, tk.END)
        self.display.insert(tk.END, self.expression)

if __name__ == "__main__":
    root = tk.Tk()
    calculator = Calculator(root)
    root.mainloop()
